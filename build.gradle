buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}


plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id 'org.jetbrains.dokka' version '0.9.17'
    id 'maven'
    id 'signing'
}

def username = hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername')
def password = hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword')

project.ext.version = "0.0.1"

group 'io.github.boc-tothefuture'
version project.ext.version

repositories {
    mavenCentral()
}

//Add integration tests
sourceSets {
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

task("integrationTest", type: Test) {
    description = "Runs the integration tests"
    group = "verification"
    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath
    mustRunAfter(tasks["test"])
    useJUnitPlatform()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8",
            'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0',
            'io.github.microutils:kotlin-logging:1.4.9'
    )
    testCompile(
            "org.assertj:assertj-core:3.11.1",
            "com.github.stefanbirkner:system-rules:1.17.2"
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.3.1',
            'org.junit.jupiter:junit-jupiter-params:5.3.1',
            "io.mockk:mockk:1.8.10.kotlin13"
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.3.1',
            'ch.qos.logback:logback-classic:1.1.3',
            'ch.qos.logback:logback-core:1.1.3'
    )
    integrationTestImplementation(
            'org.testcontainers:junit-jupiter:1.10.1',
            'org.awaitility:awaitility:3.1.3',
            'org.awaitility:awaitility-kotlin:3.1.3',
            'org.junit.jupiter:junit-jupiter-engine:5.3.1',
            'org.junit.jupiter:junit-jupiter-api:5.3.1',
            'org.junit.jupiter:junit-jupiter-params:5.3.1',
            "io.mockk:mockk:1.8.10.kotlin13",
            'ch.qos.logback:logback-classic:1.1.3',
            'ch.qos.logback:logback-core:1.1.3'
    )
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
}

//Clean up leftover files from testcontainers
clean.doLast {
    fileTree(dir: "${rootDir}", include: "*tcplocalhost*").visit {
        FileVisitDetails details -> details.file.deleteDir()
    }
}

check.dependsOn integrationTest

// For Github pages documentation
dokka {
    outputFormat = "html"
    outputDirectory = "build/docs"
}

//For maven javadoc
task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier "javadoc"
    from "build/javadoc"
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }


            pom.project {
                name "Kotlin Homie"
                packaging 'jar'
                description = "An opinionated Kotlin client implementation of the Homie IoT protocol"
                url = "https://github.com/boc-tothefuture/kotlin-homieiot"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'boc-tothefuture'
                        name = "Brian O'Connell"
                        email = 'boc-tothefuture@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/boc-tothefuture/kotlin-homieiot.git'
                    developerConnection = 'scm:git:https://github.com/boc-tothefuture/kotlin-homieiot.git'
                    url = 'https://github.com/boc-tothefuture/kotlin-homieiot'
                }
            }
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}


